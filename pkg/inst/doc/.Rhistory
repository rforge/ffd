Sweave("FFD-intro.Rnw")
Sweave("FFD-intro.Rnw")
Sweave("FFD-intro.Rnw")
require(FFD)
Sweave("FFD-intro.Rnw")
Sweave("FFD-intro.Rnw")
Sweave("FFD-intro.Rnw")
mySurvey <- surveyData(nAnimalVec = sheepData$nSheep, 
    populationData = sheepData, designPrevalence = 0.002, 
    alpha = 0.05, intraHerdPrevalence = 0.2,
    diagSensitivity = 0.9, costHerd = 15, costAnimal = 30)
myIndSamplingSummary <- indSamplingSummary(survey.Data = mySurvey, 
    stepSize = 0.05)
indSamplingSummary
stepSize = 0.02
survey.Data = mySurvey
stepSize = 0.05
herdSensMin <- 0.1
stepSize > (survey.Data@diagSensitivity - herdSensMin)
stepSize <= 0
 herdSensVec <- seq(herdSensMin, survey.Data@diagSensitivity, 
        by = stepSize)
 out.df <- indSampling.internal(survey.Data = survey.Data, 
        herdSensVec = herdSensVec)
indSampling.internal <- function(survey.Data, herdSensVec){
    ## Number of herds to be tested according to the
    ## herd sensitivities:
    nHerdsVec <- sapply(herdSensVec, 
        function(x) computeOptimalSampleSize(nPopulation = length(survey.Data@nAnimalVec), 
        prevalence = survey.Data@designPrevalence, alpha = survey.Data@alpha,
        sensitivity = x, specificity = 1, lookupTable = FALSE))
    ## Number of Animals to be tested:
#    meanSampleSize <- sapply(herdSensVec, 
#        function(x) computeAverageSampleSize(nAnimalVector = survey.Data@nAnimalVec,
#        intraHerdPrevalence = survey.Data@intraHerdPrevalence, herdSens = x, 
#        sensitivityDiagTest = survey.Data@diagSensitivity))
    meanSampleSize <- sapply(herdSensVec, 
        function(x){
            out <- computeSampleSizeInd(survey.Data = survey.Data, 
                herdSensitivity = x)
            return(out$nAnimalsMeanPerHerd)
        })        
    nAnimalsMeanVec <- meanSampleSize*nHerdsVec    
    ## Total Cost:
    if ((length(survey.Data@costHerd) > 0) & (length(survey.Data@costAnimal) > 0)){
        expectedCostVec <- nAnimalsMeanVec*survey.Data@costAnimal + 
            nHerdsVec*survey.Data@costHerd
    } else {
        expectedCostVec <- numeric(length(herdSensVec))*NA
    }
    ## Return value:
    out <- data.frame(herdSensVec = herdSensVec, 
        nHerdsVec = nHerdsVec,
        nAnimalsMeanVec = nAnimalsMeanVec, 
        expectedCostVec = expectedCostVec)
    return(out)    
}
 nHerdsVec <- sapply(herdSensVec, 
        function(x) computeOptimalSampleSize(nPopulation = length(survey.Data@nAnimalVec), 
        prevalence = survey.Data@designPrevalence, alpha = survey.Data@alpha,
        sensitivity = x, specificity = 1, lookupTable = FALSE))
out.df <- indSampling.internal(survey.Data = survey.Data, 
+          herdSensVec = herdSensVec)
out.df <- indSampling.internal(survey.Data = survey.Data, 
herdSensVec = herdSensVec)
source("D:/projekte/Brucella melitensis/analyse/ws/DVG_Projekt/FFD/R/computeSampleSizeInd.R")
out.df <- indSampling.internal(survey.Data = survey.Data, 
herdSensVec = herdSensVec)
nHerdsVec <- sapply(herdSensVec, 
        function(x) computeOptimalSampleSize(nPopulation = length(survey.Data@nAnimalVec), 
        prevalence = survey.Data@designPrevalence, alpha = survey.Data@alpha,
        sensitivity = x, specificity = 1, lookupTable = FALSE))
meanSampleSize <- sapply(herdSensVec, 
        function(x){
            out <- computeSampleSizeInd(survey.Data = survey.Data, 
                herdSensitivity = x)
            return(out$nAnimalsMeanPerHerd)
        })        
herdSensVec
x <- herdSensVec[1]
out <- computeSampleSizeInd(survey.Data = survey.Data, 
                herdSensitivity = x)
herdSensitivity = x
lookupTable <- computeOptimalSampleSize(nPopulation = max(survey.Data@nAnimalVec), 
        prevalence = survey.Data@intraHerdPrevalence, alpha = (1-herdSensitivity),
        sensitivity = survey.Data@diagSensitivity, specificity = 1, lookupTable = TRUE)
max(survey.Data@nAnimalVec)
survey.Data@intraHerdPrevalence
alpha = (1-herdSensitivity)
alpha
sensitivity = survey.Data@diagSensitivity
specificity = 1
sensitivity
specificity
lookupTable
lookupTable = TRUE
lookupTable
populationSizes <- seq(1,nPopulation)
nPopulation = max(survey.Data@nAnimalVec)
prevalence = survey.Data@intraHerdPrevalence
alpha = (1-herdSensitivity)
alpha
sensitivity = survey.Data@diagSensitivity
specificity = 1
populationSizes <- seq(1,nPopulation)
populationSizes
sampleSizes <- sapply(populationSizes, 
            function(ii) computeOptimalSampleSize(nPopulation = ii, 
            prevalence = prevalence, alpha = alpha, sensitivity = sensitivity, 
            specificity = specificity, lookupTable = FALSE))
sampleSizes
nInaccurate <- populationSizes[sampleSizes == Inf]
if(length(nInaccurate) > 0){
            sampleSizes[sampleSizes == Inf] <- nInaccurate            
            warning(paste("Desired herd sensitivity could not be achieved for population sizes ", 
                range(nInaccurate)[1], " - ", range(nInaccurate)[2], ".", sep = ""))
        }
cumMaxSampleSizes <- rep(1,nPopulation)
for (ii in 2:nPopulation) cumMaxSampleSizes[ii] <- max(cumMaxSampleSizes[ii-1], sampleSizes[ii])
splitPopulation <- split(x = populationSizes, f = cumMaxSampleSizes)
        rangePopulation <- lapply(splitPopulation, function(x) range(x))
out <- Reduce(function(x,y) rbind(x,y), rangePopulation)
        out <- cbind(out, as.numeric(names(rangePopulation)))
out
cumMaxSampleSizes
splitPopulation
dim(out)
rangePopulation
splitPopulation
out <- Reduce(function(x,y) rbind(x,y), rangePopulation)
out
names(rangePopulation)
as.numeric(names(rangePopulation))
savehistory(); file.show( paste(getwd(), "\\.Rhistory", sep="") )
